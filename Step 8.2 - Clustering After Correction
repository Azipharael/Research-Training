# =============================================================================
# SCRIPT: CLUSTERING OF BATCH-CORRECTED DATA (USING BBKNN GRAPH)
# =============================================================================

import scanpy as sc

# --- 1. SETUP ---
# Define the input file (your data already corrected by BBKNN)
# and the name for the output file.
input_file = "Liver_facs_batch_corrected.h5ad"
output_file = "Liver_facs_batch_corrected_clustered.h5ad"

# --- 2. LOAD THE BATCH-CORRECTED DATA ---
# This file contains the pre-computed neighborhood graph from BBKNN.
print(f"Loading batch-corrected data from {input_file}...")
adata = sc.read_h5ad(input_file)
adata.var_names_make_unique()
adata.obs_names_make_unique()

# --- 3. IMPORTANT: DO NOT RUN PCA OR NEIGHBORS AGAIN ---
# The loaded AnnData object already has the batch-corrected neighborhood graph.
# Re-running sc.tl.pca() or sc.pp.neighbors() would overwrite this critical
# information with an uncorrected version.

# --- 4. LEIDEN CLUSTERING ON CORRECTED DATA ---
# This clustering will be based on the BBKNN-corrected graph, so it should
# reflect biological cell types rather than batch effects.
print("Running Leiden clustering on the corrected graph...")
sc.tl.leiden(
    adata,
    flavor="igraph",    # Use the fast 'igraph' implementation
    n_iterations=2,   # A fixed number of iterations for speed
    resolution=0.6      # Using a consistent resolution for fair comparison
)

# --- 5. VISUALIZATION ---
# Compute the UMAP based on the corrected graph. Both leiden and umap
# will automatically use the graph stored in adata.uns['neighbors'].
print("Computing and plotting UMAP...")
sc.tl.umap(adata)

# Plot the UMAP colored by the resulting clusters and by batch.
# You should see that batches are well-mixed within the clusters.
sc.pl.umap(
    adata,
    color=['leiden', 'batch'],
    title='UMAP of Batch-Corrected Data',
    save="_corrected_clusters.png"
)

# --- 6. SAVE THE CORRECTED AND CLUSTERED DATA ---
# This file will contain the final clusters and UMAP coordinates.
print(f"Saving corrected and clustered data to {output_file}...")
adata.write(output_file)

print("\nCorrected clustering script finished successfully.")
