# =============================================================================
# SCRIPT: CLUSTERING OF UNCORRECTED DATA (USING EXISTING PCA)
# =============================================================================

import scanpy as sc

# --- 1. SETUP ---
# Define the input file (your data with uncorrected PCA already computed)
# and the name for the output file.
input_file = "Liver_facs_PCA_no_batch_correction.h5ad"
output_file = "Liver_facs_uncorrected_clustered.h5ad"

# --- 2. LOAD THE PRE-COMPUTED PCA DATA ---
print(f"Loading data with pre-computed PCA from {input_file}...")
adata = sc.read_h5ad(input_file)

# --- 3. BUILD UNCORRECTED NEIGHBORHOOD GRAPH ---
# This step uses the PCA results already stored in adata.obsm['X_pca'].
# We are creating the neighborhood graph based on the uncorrected data.
print("Building uncorrected neighborhood graph...")
sc.pp.neighbors(adata, n_neighbors=15, n_pcs=30)

# --- 4. LEIDEN CLUSTERING ON UNCORRECTED DATA ---
# The clustering will be based on the uncorrected graph, so it will be
# heavily influenced by the batch effect.
print("Running Leiden clustering on uncorrected data...")
sc.tl.leiden(
    adata,
    flavor="igraph",
    n_iterations=2,
    resolution=0.6 # Using the same resolution for a fair comparison
)

# --- 5. VISUALIZATION ---
# Compute the UMAP based on the uncorrected graph.
print("Computing and plotting UMAP...")
sc.tl.umap(adata)

# Plot the UMAP colored by the resulting clusters and by batch.
# You should see a strong correlation between the two.
sc.pl.umap(
    adata,
    color=['leiden', 'batch'],
    title='UMAP of Uncorrected Data',
    save="_uncorrected_clusters.png"
)

# --- 6. SAVE THE UNCORRECTED CLUSTERED DATA ---
print(f"Saving uncorrected clustered data to {output_file}...")
adata.write(output_file)

print("\nUncorrected clustering script finished successfully.")
